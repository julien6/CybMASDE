{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the CybMASDE Documentation","text":"<p>CybMASDE (Cyber Multi-Agent System Design and Experimentation) is a modular platform designed to model, train, analyze, and deploy intelligent multi-agent systems (MAS) based on the MAMAD methodology (MOISE+MARL Assisted MAS Design). It combines performance from multi-agent reinforcement learning (MARL) and organizational modeling (MOISE+) for controlling and explaining emerging agents' behaviour with practical tools for experimentation, transfer, and explainability in complex cyber-physical environments.</p> <p>CybMASDE can be used: * \ud83e\udde0 As a research framework, to study agent autonomy, coordination, adaptation, and explainability.  \u2699\ufe0f As an engineering tool, to design and deploy agent-based behaviors in real or simulated infrastructures.  \ud83d\udcbb Through three interfaces:   + a CLI (Command Line Interface) for automation and batch workflows,    + a Python library for direct integration into experiments,    + and a Graphical User Interface (GUI) built with Angular for visual project editing and monitoring.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Installation</li> <li>Getting Started</li> <li>Usage</li> <li>Architecture</li> <li>API Reference</li> <li>Contributing</li> <li>Changelog</li> <li>FAQ</li> <li>Glossary</li> <li>Command Reference</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>CybMASDE was designed to bridge the gap between research prototypes and operational systems by providing: * A structured workflow for the lifecycle of multi-agent systems (from simulation to deployment).  An organizationally-aware reinforcement learning engine (MOISE+MARL).  Integrated support for world models, multi-agent policy training, and automatic explainability (Auto-TEMM).  A transfer component* to synchronize simulated and real environments (via REST APIs).  </p> <p>Each phase of the MAMAD method is implemented as a separate module:</p> <ol> <li>Modeling \u2013 world model training or handcrafted environment definition.  </li> <li>Training \u2013 organizationally guided MARL policy optimization.  </li> <li>Analyzing \u2013 behavioral explainability and stability assessment.  </li> <li>Transferring \u2013 policy deployment and iterative refinement in the target environment.</li> </ol>"},{"location":"#example-workflow","title":"Example Workflow","text":"<p>A typical workflow using the CLI may look like this:</p> <pre><code># Create and validate a new project\n\ncybmasde init -n overcooked_project --template worldmodel\ncybmasde validate\n\n# Run the full MAMAD pipeline automatically\n\ncybmasde run --full-auto --reward-threshold 3.5 --max-refine 5\n\n# Deploy the learned joint policy remotely\n\ncybmasde deploy --remote --api http://localhost:8080/api\n</code></pre>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>This document provides detailed information about the API endpoints available in the CybMASDE project. Each endpoint is described with its purpose, parameters, and expected responses.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<p>The base URL for all API requests is:</p> <pre><code>https://api.cybmasde.example.com/v1\n</code></pre>"},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#1-get-resource","title":"1. Get Resource","text":"<ul> <li>Endpoint: <code>/resource</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of resources.</li> <li>Parameters:</li> <li><code>limit</code> (optional): Number of resources to return.</li> <li><code>offset</code> (optional): Offset for pagination.</li> <li>Response:</li> <li>200 OK <code>json     {       \"data\": [         {           \"id\": \"1\",           \"name\": \"Resource 1\"         },         {           \"id\": \"2\",           \"name\": \"Resource 2\"         }       ],       \"meta\": {         \"total\": 2       }     }</code></li> </ul>"},{"location":"api/#2-create-resource","title":"2. Create Resource","text":"<ul> <li>Endpoint: <code>/resource</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new resource.</li> <li>Parameters:</li> <li><code>name</code> (required): The name of the resource.</li> <li>Request Body: <code>json   {     \"name\": \"New Resource\"   }</code></li> <li>Response:</li> <li>201 Created <code>json     {       \"id\": \"3\",       \"name\": \"New Resource\"     }</code></li> </ul>"},{"location":"api/#3-update-resource","title":"3. Update Resource","text":"<ul> <li>Endpoint: <code>/resource/{id}</code></li> <li>Method: <code>PUT</code></li> <li>Description: Updates an existing resource.</li> <li>Parameters:</li> <li><code>id</code> (required): The ID of the resource to update.</li> <li>Request Body: <code>json   {     \"name\": \"Updated Resource\"   }</code></li> <li>Response:</li> <li>200 OK <code>json     {       \"id\": \"3\",       \"name\": \"Updated Resource\"     }</code></li> </ul>"},{"location":"api/#4-delete-resource","title":"4. Delete Resource","text":"<ul> <li>Endpoint: <code>/resource/{id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a resource.</li> <li>Parameters:</li> <li><code>id</code> (required): The ID of the resource to delete.</li> <li>Response:</li> <li>204 No Content</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>All API responses include a standard error format:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"RESOURCE_NOT_FOUND\",\n    \"message\": \"The requested resource was not found.\"\n  }\n}\n</code></pre>"},{"location":"api/#conclusion","title":"Conclusion","text":"<p>This API documentation provides a comprehensive overview of the available endpoints in the CybMASDE project. For further assistance, please refer to the Contributing section or contact the development team.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>CybMASDE is designed as a modular, extensible, and hybrid architecture that unifies simulation, learning, analysis, and deployment in a coherent multi-agent development environment.</p> <p>This section introduces: * The MAMAD conceptual framework * The software modules (Modeling, Training, Analyzing, Transferring, Refining) * The internal architecture (backend, frontend, and CLI) * The process flow between modules</p>"},{"location":"architecture/#1-conceptual-overview-the-mamad-framework","title":"\ud83e\udde0 1. Conceptual Overview: The MAMAD Framework","text":"<p>At the highest level, CybMASDE implements the MAMAD methodology \u2014 a structured process for developing intelligent multi-agent systems:</p> <p>MAMAD \u2014 Modeling, Analyzing, Monitoring, Adapting, Deploying</p> <p>Each stage corresponds to a core subsystem in CybMASDE:</p> Phase Description Key Components Modeling Builds or learns an internal representation of the environment and organization. Handcrafted or generated environments, world models (VAE, RNN) Training Learns agent policies through multi-agent reinforcement learning under MOISE+ constraints. MAPPO, MADDPG, QMIX, ROMA Analyzing Evaluates and explains agent behaviors. Auto-TEMM / TEMM analysis, clustering, metrics computation Transferring Deploys trained policies into real or hybrid environments. API-based remote execution, trajectory synchronization Refining Adjusts or retrains the most relevant roles and goals based on analysis feedback. Adaptive retraining, organizational updates <p>Each phase is autonomous but interconnected, enabling iterative refinement cycles.</p>"},{"location":"architecture/#2-software-architecture-overview","title":"\ud83e\udde9 2. Software Architecture Overview","text":"<p>CybMASDE follows a multi-layered architecture composed of three main layers:</p> <pre><code>+-------------------------------------------------------+\n|                   Frontend (Angular GUI)              |\n|  - Project configuration editor                       |\n|  - Visualization dashboards                           |\n|  - Interactive pipeline control                       |\n+-------------------------------------------------------+\n|                   Backend (Python)                    |\n|  - CLI interface (Click / Typer)                      |\n|  - Core MAMAD modules (Modeling, Training, etc.)      |\n|  - APIs and orchestration                             |\n|  - Storage (JSON-based project state)                 |\n+-------------------------------------------------------+\n|                   Infrastructure Layer                |\n|  - Python virtual environment                         |\n|  - External libraries (PyTorch, Ray RLlib, etc.)      |\n|  - API endpoints for remote environments              |\n+-------------------------------------------------------+\n\n````\n\n### \ud83e\uddee Backend (Python)\n\nThe backend is the **core engine** of CybMASDE.  \nIt contains all algorithmic, data management, and orchestration logic.\n\nMain responsibilities:\n* Execute each activity of the MAMAD pipeline  \n* Manage project state and configurations (`project_configuration.json`)  \n* Provide the CLI and Python APIs  \n* Handle data persistence, logging, and checkpointing  \n\nEach submodule (e.g., `cybmasde.training` ) can be used **standalone** or through the main pipeline orchestrator.\n\n---\n\n### \ud83c\udf10 Frontend (Angular)\n\nThe frontend provides a **graphical interface** for visualizing and editing project configurations.  \nIt communicates with the backend through IPC (if running as an Electron app) or REST endpoints (if hosted separately).\n\nKey features:\n* Step-by-step configuration of each MAMAD activity  \n* JSON and code editor (Monaco) for advanced users  \n* Interactive dashboards for training and analysis metrics (_upcoming feature_)\n* Integrated file project management and validation tools\n* Running the full pipeline from GUI interface\n\n---\n\n### \ud83d\udcbb CLI Interface\n\nThe Command Line Interface ( `cybmasde` ) is built using Python\u2019s **Typer** library.  \nIt provides a consistent way to run the entire pipeline or individual modules.\n\nExamples:\n\n```bash\ncybmasde init -n demo_project --template worldmodel\ncybmasde validate\ncybmasde run --full-auto\ncybmasde analyze --auto-temm\ncybmasde deploy --remote\n````\n\nThe CLI acts as a **thin orchestration layer**, invoking the corresponding backend processes.\n\n---\n\n## \u2699\ufe0f 3. Internal Components\n\nEach activity in CybMASDE corresponds to a Python module and is mapped to a specific section in the configuration file.\n\n| Module           | Folder           | Core Responsibilities                                                          |\n| ---------------- | ---------------- | ------------------------------------------------------------------------------ |\n| **Common**       | `/common/` | Global project metadata, label manager, environment paths                      |\n| **Modeling**     | `/modelling/` | Builds handcrafted or generated environments and trains the world model        |\n| **Training**     | `/training/` | Optimizes agent policies using MARL algorithms with organizational constraints |\n| **Analyzing**    | `/analyzing/` | Evaluates, visualizes, and explains learned behaviors                          |\n| **Transferring** | `/transferring/` | Interfaces with external APIs to deploy policies and collect trajectories      |\n| **Refining**     | `/refining/` | Performs iterative training-analysis cycles until stability or convergence     |\n\nEach module has its own `__init__.py` and exposes a Python API compatible with the CLI entrypoints.\n\n---\n\n## \ud83d\udd04 4. Process Flow\n\nThe typical **execution flow** (in automatic mode) looks like this:\n\n```mermaid\n---\nconfig:\n  theme: redux-color\n---\nsequenceDiagram\n  actor U as Utilisateur\n  participant API as API\n  participant Cyb as CybMASDE\n  U -&gt;&gt; API: Met manuellement&lt;br/&gt;en place API environnementale\n  U -&gt;&gt; Cyb: Configure param\u00e8tres du&lt;br/&gt;projet incluant notamment:&lt;br/&gt;fonctions r\u00e9compense/rendu/arr\u00eat et specs. org.\n  create participant T as Processus Transferring\n  Cyb -&gt;&gt; T: Lance projet\n  T -&gt;&gt; T: Initialise politique al\u00e9atoire et sauvegarde\n  loop D\u00e9ploiement continue asynchrone\n    T -&gt;&gt; T: Charge politique courante\n    alt Mode DIRECT\n      T -&gt;&gt; API: Envoie politique\n      T -&gt;&gt; T: Pause inter-collecte\n      T -&gt;&gt; API: Collecte historiques sauvegard\u00e9es\n    else Mode REMOTE\n      T -&gt;&gt; T: Execute politique courante&lt;br/&gt;pour d\u00e9terminer actions\n      T -&gt;&gt; API: Envoie actions\n      API --&gt;&gt; T: Retourne observations\n    end\n    T -&gt;&gt; T: Ajoute historiques &lt;br/&gt;collect\u00e9s dans batch courant\n    alt Taille batch courant &gt; seuil\n      T -&gt;&gt; T: Ajoute batch courant&lt;br/&gt;dans base d'historiques &lt;br/&gt; et vide batch courant\n      create participant MTA as Processus MTA&lt;br/&gt;(Modelling\u2013Training\u2013Analyzing)\n      T -&gt;&gt; MTA: Lance processus\n    end\n  end\n  rect rgb(250,250,200)\n    MTA -&gt;&gt; MTA: Mod\u00e9lisation:&lt;br&gt;&lt;br&gt;1) Charge base d'historiques&lt;br&gt;2) Entrainement World Model&lt;br&gt;(construction/mise&lt;br&gt;\u00e0 jour World Model)&lt;br&gt;3) Sauvegarde World Model\n  end\n  loop Boucle de raffinement tant que : &lt;br&gt;(R\u00e9compense moyenne &lt; seuil)&lt;br/&gt;ET (\u00c9cart-type &gt; seuil)&lt;br/&gt;OU (it\u00e9ration &gt; max)&lt;br/&gt;OU (utilisateur_continue)\n    rect rgb(250,250,200)\n      MTA -&gt;&gt; MTA: Entrainement:&lt;br/&gt;&lt;br/&gt;1) Charge et assemble World Model&lt;br/&gt;avec fonctions r\u00e9compense/arr\u00eat&lt;br/&gt;pour former simulation&lt;br/&gt;2) Entrainement avec specs. org.&lt;br/&gt;(via MOISE+MARL)&lt;br/&gt;3) Sauvegarde politique entrain\u00e9e\n    end\n    rect rgb(250,250,200)\n      MTA -&gt;&gt; MTA: Analyse:&lt;br/&gt;&lt;br/&gt;1) Charge g\u00e9n\u00e8re historiques test&lt;br/&gt;avec politique entrain\u00e9e&lt;br&gt;2) Applique Auto-TEMM pour&lt;br/&gt;inf\u00e9rrer specs. org.+m\u00e9triques&lt;br&gt;(r\u00e9compense moyenne/\u00e9cart-type)\n    end\n    MTA -&gt;&gt; U: Demander de continuer ou d'arr\u00eater\n    U --&gt; MTA: Valeur utilisateur_continue\n    MTA -&gt;&gt; U: Affiche sp\u00e9cifications organisationnelles + m\u00e9triques\n    opt Raffinement manuel suppl\u00e9mentaire\n      MTA -&gt; U: Demander d'am\u00e9liorer manuellement les specs. org.\n      U --&gt; MTA: Specs. org. am\u00e9lior\u00e9es\n    end\n    MTA -&gt;&gt; MTA: iteration = iteration+1\n  end\n  MTA -&gt;&gt; T: Met \u00e0 jour politique&lt;br/&gt;courante avec derni\u00e8re&lt;br/&gt;politique entrain\u00e9e\n  destroy MTA\n  T--&gt; MTA: Arr\u00eater le processus MTA\n</code></pre> <p>The MTA process (Modeling\u2013Training\u2013Analyzing) runs asynchronously with the Transferring process, ensuring continuous learning and adaptation in hybrid environments.</p>"},{"location":"architecture/#5-configuration-system","title":"\ud83e\uddf0 5. Configuration System","text":"<p>CybMASDE projects are driven by a single JSON configuration file:</p> <pre><code>project_configuration.json\n</code></pre> <p>Each key corresponds to one module:</p> <pre><code>{\n  \"common\": { ... },\n  \"modelling\": { ... },\n  \"training\": { ... },\n  \"analyzing\": { ... },\n  \"transferring\": { ... },\n  \"refining\": { ... }\n}\n</code></pre> <p>This schema allows for:</p> <ul> <li>Automatic validation (<code>cybmasde validate</code>)</li> <li>Modular updates (partial reconfiguration)</li> <li>Reproducible experiments</li> </ul>"},{"location":"architecture/#6-extensibility-and-integration","title":"\ud83e\udde0 6. Extensibility and Integration","text":"<p>CybMASDE is designed to be extensible:</p> <ul> <li>You can add new learning algorithms by subclassing the MARLlib <code>Trainer</code> base class.</li> <li>You can register new analysis methods (e.g., new metrics or visualization tools).</li> <li>You can plug in new deployment targets via REST APIs interfaces.</li> </ul> <p>Developers can use the internal Python API to script or automate workflows without leaving their research environment.</p>"},{"location":"architecture/#7-technology-stack","title":"\ud83e\uddee 7. Technology Stack","text":"Layer Technology Description Backend Python 3.8, Typer, PyTorch, RLlib Core learning, orchestration, and CLI Frontend Angular 18+, TypeScript, Material Design GUI for configuration and visualization Analysis NumPy, Pandas, Matplotlib, Scikit-learn Data analysis and trajectory visualization Explainability Auto-TEMM, PCA, clustering Explainable MARL evaluation Deployment REST API, WebSocket, gRPC (optional) Integration with external infrastructures"},{"location":"architecture/#8-summary","title":"\ud83d\ude80 8. Summary","text":"<p>CybMASDE\u2019s architecture merges:</p> <ul> <li>The formalism of organizational modeling (MOISE+)</li> <li>The adaptivity of multi-agent reinforcement learning</li> <li>The usability of modern development tools (CLI, GUI, API)</li> </ul> <p>This unique combination enables the design of distributed, explainable, and adaptive multi-agent systems ready for both research and operational contexts.</p>"},{"location":"changelog/","title":"Changelog for CybMASDE","text":""},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial project setup with MkDocs.</li> <li>Basic documentation structure created.</li> </ul>"},{"location":"changelog/#100-yyyy-mm-dd","title":"[1.0.0] - YYYY-MM-DD","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Introduction to the project.</li> <li>Installation instructions.</li> <li>Getting started guide.</li> <li>Usage documentation.</li> <li>Architecture overview.</li> <li>API documentation.</li> <li>Contribution guidelines.</li> <li>FAQ section.</li> <li>Glossary of terms.</li> <li>Commands reference.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated the project layout for better organization.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Initial bugs and issues identified during the setup phase.</li> </ul>"},{"location":"changelog/#101-yyyy-mm-dd","title":"[1.0.1] - YYYY-MM-DD","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Minor typos and formatting issues in the documentation.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Improved clarity in the installation instructions.</li> </ul>"},{"location":"changelog/#110-yyyy-mm-dd","title":"[1.1.0] - YYYY-MM-DD","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>New features based on user feedback.</li> <li>Additional examples in the usage documentation.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Resolved issues with the API documentation.</li> </ul>"},{"location":"changelog/#111-yyyy-mm-dd","title":"[1.1.1] - YYYY-MM-DD","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Corrected broken links in the documentation.</li> </ul>"},{"location":"changelog/#120-yyyy-mm-dd","title":"[1.2.0] - YYYY-MM-DD","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>New commands added to the commands reference.</li> <li>Enhanced FAQ section with more questions and answers.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Updated the architecture documentation to reflect recent changes.</li> </ul>"},{"location":"changelog/#121-yyyy-mm-dd","title":"[1.2.1] - YYYY-MM-DD","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fixed formatting issues in the changelog itself.</li> </ul>"},{"location":"commands/","title":"Commands for CybMASDE","text":"<p>This document lists the available commands for interacting with the CybMASDE project, along with their descriptions and examples.</p>"},{"location":"commands/#command-list","title":"Command List","text":""},{"location":"commands/#cybmasde-start","title":"<code>cybmasde start</code>","text":"<p>Starts the CybMASDE application.</p> <p>Usage:</p> <pre><code>cybmasde start\n</code></pre>"},{"location":"commands/#cybmasde-stop","title":"<code>cybmasde stop</code>","text":"<p>Stops the running CybMASDE application.</p> <p>Usage:</p> <pre><code>cybmasde stop\n</code></pre>"},{"location":"commands/#cybmasde-status","title":"<code>cybmasde status</code>","text":"<p>Displays the current status of the CybMASDE application.</p> <p>Usage:</p> <pre><code>cybmasde status\n</code></pre>"},{"location":"commands/#cybmasde-deploy","title":"<code>cybmasde deploy</code>","text":"<p>Deploys the CybMASDE application to the specified environment.</p> <p>Usage:</p> <pre><code>cybmasde deploy [environment]\n</code></pre>"},{"location":"commands/#cybmasde-logs","title":"<code>cybmasde logs</code>","text":"<p>Fetches the logs of the CybMASDE application.</p> <p>Usage:</p> <pre><code>cybmasde logs\n</code></pre>"},{"location":"commands/#cybmasde-help","title":"<code>cybmasde help</code>","text":"<p>Displays help information for CybMASDE commands.</p> <p>Usage:</p> <pre><code>cybmasde help\n</code></pre>"},{"location":"commands/#additional-information","title":"Additional Information","text":"<p>For more detailed information on each command, refer to the respective sections in the documentation or use the <code>help</code> command.</p>"},{"location":"contributing/","title":"Contributing to CybMASDE","text":"<p>Thank you for your interest in contributing to CybMASDE! We welcome contributions from the community and appreciate your help in making this project better. Please follow the guidelines below to ensure a smooth contribution process.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li> <p>Fork the Repository: Start by forking the repository on GitHub. This will create a copy of the project under your GitHub account.</p> </li> <li> <p>Clone Your Fork: Clone your forked repository to your local machine using:    <code>git clone https://github.com/your-username/cybmasde-docs.git</code></p> </li> <li> <p>Create a Branch: Create a new branch for your feature or bug fix:    <code>git checkout -b my-feature-branch</code></p> </li> <li> <p>Make Changes: Make your changes in the codebase. Ensure that your code adheres to the project's coding standards.</p> </li> <li> <p>Test Your Changes: Run tests to verify that your changes work as expected and do not break existing functionality.</p> </li> <li> <p>Commit Your Changes: Commit your changes with a clear and descriptive commit message:    <code>git commit -m \"Add a new feature or fix a bug\"</code></p> </li> <li> <p>Push to Your Fork: Push your changes to your forked repository:    <code>git push origin my-feature-branch</code></p> </li> <li> <p>Create a Pull Request: Go to the original repository on GitHub and create a pull request from your branch. Provide a clear description of your changes and why they should be merged.</p> </li> </ol>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<ul> <li>Follow the existing code style and conventions used in the project.</li> <li>Write clear and concise comments in your code.</li> <li>Ensure that your code is well-documented.</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter any issues or bugs, please report them by opening an issue in the GitHub repository. Provide as much detail as possible, including steps to reproduce the issue.</p>"},{"location":"contributing/#thank-you","title":"Thank You!","text":"<p>We appreciate your contributions and support for CybMASDE! Together, we can make this project even better.</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This section collects common questions about installing, using, and extending CybMASDE. If you don\u2019t find your answer here, feel free to open an issue on GitHub.</p>"},{"location":"faq/#installation-and-setup","title":"\ud83e\uddf0 Installation and Setup","text":""},{"location":"faq/#q1-what-operating-systems-are-supported","title":"Q1. What operating systems are supported?","text":"<p>CybMASDE is primarily developed and tested on Linux (Ubuntu 22.04+), but it can also run on: * macOS (with Python 3.8) * Windows 10/11 (through WSL2 or native installation)</p> <p>The graphical frontend (Angular) is fully cross-platform.</p>"},{"location":"faq/#q2-how-do-i-install-cybmasde","title":"Q2. How do I install CybMASDE?","text":"<p>Simply clone the repository and run the provided script:</p> <pre><code>git clone https://github.com/julien6/CybMASDE.git\ncd CybMASDE\n./install.sh\n````\n\nIt will automatically install all backend (Python) and frontend (Node.js) dependencies.\n\nSee the [Installation Guide](installation.md) for details.\n\n---\n\n### **Q3. The install script fails with \u201cPermission denied\u201d. What should I do?**\n\nMake the script executable first:\n\n```bash\nchmod +x install.sh\n./install.sh\n</code></pre> <p>If the problem persists, ensure your Python and Node versions meet the requirements:</p> <ul> <li>Python \u2265 3.8</li> <li>Node.js \u2265 18</li> </ul>"},{"location":"faq/#q4-how-can-i-verify-my-installation","title":"Q4. How can I verify my installation?","text":"<p>Run:</p> <pre><code>cybmasde --version\ncybmasde --help\n</code></pre> <p>If both commands work, your installation is successful.</p>"},{"location":"faq/#project-management","title":"\u2699\ufe0f Project Management","text":""},{"location":"faq/#q5-how-do-i-create-a-new-project","title":"Q5. How do I create a new project?","text":"<p>Use the <code>init</code> command:</p> <pre><code>cybmasde init -n my_project -d \"My first CybMASDE project\"\n</code></pre> <p>You can also choose a template (e.g., <code>--template worldmodel</code> ).</p> <p>This creates a complete project structure with a default configuration file ( <code>project_configuration.json</code> ).</p> <p>You can aslo choose to create a new project using the GUI interface via <code>File -&gt; New Project</code></p>"},{"location":"faq/#q6-what-is-the-purpose-of-the-project_configurationjson-file","title":"Q6. What is the purpose of the <code>project_configuration.json</code> file?","text":"<p>It defines all parameters of your project:</p> <ul> <li>Environment paths</li> <li>Model and training hyperparameters</li> <li>Analysis and transfer settings</li> </ul> <p>Every command ( <code>run</code> , <code>train</code> , <code>analyze</code> , etc.) reads this configuration to ensure reproducibility.</p> <p>See Architecture for a breakdown of this structure.</p>"},{"location":"faq/#q7-how-do-i-check-if-my-configuration-is-valid","title":"Q7. How do I check if my configuration is valid?","text":"<p>Run:</p> <pre><code>cybmasde validate\n</code></pre> <p>The validator will check:</p> <ul> <li>File existence and format consistency</li> <li>JSON schema compliance</li> <li>Hyperparameter structure validity</li> </ul> <p>If something\u2019s wrong, the CLI will display detailed errors with line numbers.</p>"},{"location":"faq/#learning-and-analysis","title":"\ud83e\udde0 Learning and Analysis","text":""},{"location":"faq/#q8-what-algorithms-are-supported-for-training","title":"Q8. What algorithms are supported for training?","text":"<p>CybMASDE integrates several Multi-Agent Reinforcement Learning (MARL) algorithms, including:</p> <ul> <li>MAPPO</li> <li>MADDPG</li> <li>QMIX</li> <li>ROMA</li> <li>VDN</li> <li>IQL</li> </ul> <p>Each can be selected via the CLI or configuration file.</p>"},{"location":"faq/#q9-what-is-the-moisemarl-approach","title":"Q9. What is the MOISE+MARL approach?","text":"<p>It combines organizational modeling (MOISE+) and multi-agent reinforcement learning (MARL). Agents learn while being constrained by organizational rules \u2014 roles, missions, and norms \u2014 allowing structured cooperation instead of pure self-optimization.</p> <p>This is one of CybMASDE\u2019s key theoretical innovations. Learn more in the Introduction.</p>"},{"location":"faq/#q10-how-does-the-analysis-phase-work","title":"Q10. How does the analysis phase work?","text":"<p>CybMASDE\u2019s Analyzing module uses the Auto-TEMM (Trajectory-Explained Multi-agent Modeling) process to:</p> <ul> <li>Cluster agent trajectories</li> <li>Extract organizational patterns</li> <li>Compute explicability metrics (SOF, FOF, OF)</li> <li>Visualize behavioral similarities and divergences</li> </ul> <p>Results are saved under <code>/analyzing/figures/</code> and <code>/analyzing/statistics.json</code> .</p>"},{"location":"faq/#refinement-and-deployment","title":"\ud83d\udd04 Refinement and Deployment","text":""},{"location":"faq/#q11-what-is-the-difference-between-run-and-refine","title":"Q11. What is the difference between <code>run</code> and <code>refine</code> ?","text":"<ul> <li><code>cybmasde run</code> executes the entire MAMAD pipeline (Model\u2013Train\u2013Analyze\u2013Transfer\u2013Refine).</li> <li><code>cybmasde refine</code> only executes additional refinement loops (analysis + retraining) after initial runs.</li> </ul> <p>Refinement cycles continue until convergence or user interruption.</p>"},{"location":"faq/#q12-how-can-i-deploy-trained-agents-in-a-real-environment","title":"Q12. How can I deploy trained agents in a real environment?","text":"<p>Use the <code>deploy</code> command:</p> <pre><code>cybmasde deploy --remote --api http://localhost:8080/api\n</code></pre> <p>Deployment can happen in two modes:</p> <ul> <li>DIRECT: agents execute policies locally</li> <li>REMOTE: CybMASDE executes policies and sends actions to agents via an API</li> </ul> <p>See Usage for details.</p>"},{"location":"faq/#development-and-customization","title":"\ud83e\udde9 Development and Customization","text":""},{"location":"faq/#q13-can-i-add-new-marl-algorithms","title":"Q13. Can I add new MARL algorithms?","text":"<p>Yes. All algorithms are implemented as subclasses of <code>BaseTrainer</code> . To add one:</p> <ol> <li>Implement a new trainer in <code>/training/algorithms/</code></li> <li>Register it in <code>training/algorithm_registry.py</code></li> <li>Add your configuration schema under <code>training/hyperparameters.json</code></li> </ol> <p>CybMASDE will automatically detect it at runtime.</p>"},{"location":"faq/#q14-can-i-use-my-own-environment","title":"Q14. Can I use my own environment?","text":"<p>Absolutely. You can provide your own environment either by:</p> <ul> <li>Implementing it manually (<code>modelling/handcrafted_environment.py</code>), or</li> <li>Using traces to generate a World Model (Autoencoder + RNN).</li> </ul> <p>Your environment must follow the PettingZoo API standard ( <code>reset()</code> , <code>step()</code> , <code>render()</code> ).</p>"},{"location":"faq/#q15-how-can-i-integrate-cybmasde-into-a-python-script-or-notebook","title":"Q15. How can I integrate CybMASDE into a Python script or notebook?","text":"<p>You can import it directly as a library:</p> <pre><code>from cybmasde import CybMASDEProject\n\nproject = CybMASDEProject(\"my_project/project_configuration.json\")\nproject.validate()\nproject.run(full_auto=True)\n</code></pre> <p>This allows integration with external workflows (e.g., Ray Tune, WandB, or custom dashboards).</p>"},{"location":"faq/#gui-and-visualization","title":"\ud83d\udda5\ufe0f GUI and Visualization","text":""},{"location":"faq/#q16-how-do-i-start-the-graphical-interface","title":"Q16. How do I start the graphical interface?","text":"<p>From the main directory:</p> <pre><code>cd frontend\nnpm run start\n</code></pre> <p>Then open your browser at: \ud83d\udc49 http://localhost:4200</p>"},{"location":"faq/#q17-what-can-i-do-from-the-gui","title":"Q17. What can I do from the GUI?","text":"<ul> <li>Edit project configurations visually</li> <li>Launch and monitor training runs</li> <li>View Auto-TEMM figures and statistics</li> <li>Validate configuration files interactively</li> </ul> <p>It provides a simplified version of all CLI functionalities.</p>"},{"location":"faq/#troubleshooting","title":"\ud83e\udde9 Troubleshooting","text":""},{"location":"faq/#q18-my-cli-commands-are-not-recognized","title":"Q18. My CLI commands are not recognized.","text":"<p>Ensure that the <code>cybmasde</code> executable is installed in your PATH. If not, reinstall in editable mode:</p> <pre><code>pip install -e .\n</code></pre>"},{"location":"faq/#q19-the-gui-doesnt-load-after-npm-run-start","title":"Q19. The GUI doesn\u2019t load after <code>npm run start</code> .","text":"<p>Check that:</p> <ul> <li>Node.js \u2265 18 is installed (<code>node -v</code>)</li> <li>Port 4200 is not already in use</li> <li>The backend is installed and accessible</li> </ul>"},{"location":"faq/#q20-the-analysis-phase-fails-with-missing-module-sklearn","title":"Q20. The analysis phase fails with \u201cmissing module sklearn\u201d.","text":"<p>Install missing dependencies manually:</p> <pre><code>pip install scikit-learn matplotlib pandas\n</code></pre>"},{"location":"faq/#general","title":"\ud83e\udded General","text":""},{"location":"faq/#q21-whats-the-difference-between-the-cli-gui-and-python-api","title":"Q21. What\u2019s the difference between the CLI, GUI, and Python API?","text":"Interface Best For Description CLI Automation, batch runs, reproducibility Command-line orchestration of the MAMAD pipeline GUI Interactive use, visualization Angular web interface for project creation and analysis Python API Research and scripting Direct use of CybMASDE components within custom Python workflows <p>All three share the same backend logic and configuration schema.</p>"},{"location":"faq/#q22-where-are-logs-and-results-stored","title":"Q22. Where are logs and results stored?","text":"<p>Each project maintains its own folders:</p> <pre><code>/training/statistics.json\n/analyzing/figures/\n/transferring/configuration.json\n/refining/logs/\n</code></pre> <p>Logs are stored in <code>/logs/</code> inside the project directory.</p>"},{"location":"faq/#q23-is-cybmasde-open-source","title":"Q23. Is CybMASDE open source?","text":"<p>Yes. The full source code is available on GitHub: \ud83d\udc49 https://github.com/julien6/CybMASDE</p> <p>The project is licensed under MIT unless otherwise stated.</p>"},{"location":"faq/#q24-who-maintains-cybmasde","title":"Q24. Who maintains CybMASDE?","text":"<p>CybMASDE was developed by Julien Soul\u00e9 as part of a PhD project between:</p> <ul> <li>Universit\u00e9 Grenoble Alpes \u2013 LCIS Laboratory, and</li> <li>Thales LAS \u2013 La Ruche (Rennes, France)</li> </ul> <p>It continues to evolve as an open research and development platform for multi-agent systems and cyber-defense.</p>"},{"location":"faq/#q25-where-can-i-learn-more-about-the-theory-behind-cybmasde","title":"Q25. Where can I learn more about the theory behind CybMASDE?","text":"<p>The theoretical foundations are detailed in:</p> <ul> <li>The associated PhD manuscript, available upon request.</li> <li>The MAMAD methodology documentation (see Architecture).</li> <li>The MOISE+MARL papers referenced in the bibliography.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to CybMASDE! This section will guide you through the creation, validation, and execution of your first CybMASDE project whether you use it through the CLI, the Python API, or the Web GUI.</p> <p>CybMASDE projects are fully self-contained and reproducible. Each project includes its own configuration file ( <code>project_configuration.json</code> ), environment definitions, and analysis outputs.  </p>"},{"location":"getting-started/#1-create-a-new-project","title":"\ud83e\uddf1 1. Create a New Project","text":"<p>To create a new project, use the <code>init</code> command:</p> <pre><code>cybmasde init -n my_first_project -d \"Exploring multi-agent learning in Overcooked-AI\"\n````\n\nBy default, this will:\n\n* Create a new project directory (`./my_first_project/`)\n* Generate a complete **project structure**\n* Initialize a **default configuration file** (`project_configuration.json`)\n\nYou can also specify an environment template using the `--template` option:\n\n```bash\ncybmasde init -n overcooked_test --template worldmodel\n</code></pre> <p>Available templates:</p> Template Description <code>handcrafted</code> Starts from a manually coded environment (e.g. Overcooked-AI). <code>worldmodel</code> Uses a latent world model (Autoencoder + RNN). <code>minimal</code> Creates a lightweight structure for quick testing."},{"location":"getting-started/#2-validate-the-project","title":"\ud83e\uddea 2. Validate the Project","text":"<p>Before running anything, it\u2019s a good idea to validate the configuration file and dependencies:</p> <pre><code>cd my_first_project\ncybmasde validate\n</code></pre> <p>This command checks that:</p> <ul> <li>All required files and paths exist, </li> <li>JSON structures follow the official schema, </li> <li>Model and analysis parameters are consistent.</li> </ul> <p>Example output:</p> <pre><code>[VALIDATION] Checking configuration...\n[OK] Common parameters verified.\n[OK] Modeling environment accessible.\n[OK] Training hyperparameters valid.\n[OK] Analysis module initialized.\n\u2705 Project 'my_first_project' is valid and ready.\n</code></pre> <p>If you prefer a quiet validation mode:</p> <pre><code>cybmasde validate -q\n</code></pre>"},{"location":"getting-started/#3-run-the-pipeline","title":"\u2699\ufe0f 3. Run the Pipeline","text":"<p>Once validated, you can execute the full MAMAD workflow:</p> <pre><code>cybmasde run --full-auto\n</code></pre> <p>This command runs, in sequence:</p> <ol> <li>Modeling: build or load the environment and world model</li> <li>Training: learn agent policies under MOISE+ constraints</li> <li>Analyzing: evaluate and interpret the trained agents</li> <li>Transferring: deploy policies in a real or simulated system</li> <li>Refining: iterate based on analysis results</li> </ol> <p>Each step logs its progress in the project directory under <code>/logs/</code> .</p> <p>To control execution manually (e.g., pause between stages):</p> <pre><code>cybmasde run --semi-auto\n</code></pre> <p>Or to execute each stage separately:</p> <pre><code>cybmasde model --auto\ncybmasde train --algo MAPPO\ncybmasde analyze --auto-temm\n</code></pre>"},{"location":"getting-started/#4-inspect-and-analyze-the-results","title":"\ud83d\udd0d 4. Inspect and Analyze the Results","text":"<p>After training, results are stored inside your project folder, typically under:</p> <pre><code>/training/statistics.json\n/analyzing/figures/\n/analyzing/statistics.json\n</code></pre> <p>To visualize trajectories, metrics, and organizational compliance, you can use the built-in Auto-TEMM analyzer:</p> <pre><code>cybmasde analyze --auto-temm\n</code></pre> <p>Or inspect the generated figures manually in the GUI (see below).</p>"},{"location":"getting-started/#5-use-the-web-interface-optional","title":"\ud83d\udda5\ufe0f 5. Use the Web Interface (Optional)","text":"<p>CybMASDE also provides a visual interface based on Angular for easier project management.</p> <p>To launch it:</p> <pre><code>cd frontend\nnpm run start\n</code></pre> <p>Then, an native-like desktop Electron window should appears.\\ If nothing appears, you better check logs at opening your browser at: http://localhost:4200</p> <p>From there, you can:</p> <ul> <li>Create and edit project configurations visually, </li> <li>Launch and monitor the transferring and mta processes, </li> <li>Inspect Auto-TEMM analysis results interactively.</li> <li>...</li> </ul>"},{"location":"getting-started/#6-optional-use-cybmasde-as-a-python-library","title":"\ud83e\udde0 6. (Optional) Use CybMASDE as a Python Library","text":"<p>If you want to embed CybMASDE into your own scripts or notebooks:</p> <pre><code>from cybmasde import CybMASDEProject\n\nproject = CybMASDEProject(\"my_first_project/project_configuration.json\")\nproject.validate()\nproject.run(full_auto=True)\n</code></pre> <p>You can also directly invoke submodules:</p> <pre><code>from cybmasde.training import Trainer\ntrainer = Trainer(config_path=\"training/hyperparameters.json\")\ntrainer.run()\n</code></pre>"},{"location":"getting-started/#7-typical-project-structure","title":"\ud83d\udcc2 7. Typical Project Structure","text":"<p>Once created, your project will look like this:</p> <pre><code>my_first_project/\n\u2502\n\u251c\u2500\u2500 project_configuration.json\n\u251c\u2500\u2500 common/\n\u251c\u2500\u2500 modelling/\n\u2502   \u251c\u2500\u2500 handcrafted_environment.py\n\u2502   \u2514\u2500\u2500 generated_environment/\n\u2502       \u251c\u2500\u2500 world_model/\n\u2502       \u2514\u2500\u2500 component_functions.py\n\u2502\n\u251c\u2500\u2500 training/\n\u2502   \u251c\u2500\u2500 hyperparameters.json\n\u2502   \u251c\u2500\u2500 statistics.json\n\u2502   \u2514\u2500\u2500 joint_policy/\n\u2502\n\u251c\u2500\u2500 analyzing/\n\u2502   \u251c\u2500\u2500 figures/\n\u2502   \u251c\u2500\u2500 statistics.json\n\u2502   \u2514\u2500\u2500 inferred_organizational_specifications/\n\u2502\n\u251c\u2500\u2500 transferring/\n\u2502   \u2514\u2500\u2500 configuration.json\n\u2502\n\u2514\u2500\u2500 refining/\n    \u2514\u2500\u2500 refinement_logs/\n</code></pre>"},{"location":"getting-started/#8-next-steps","title":"\ud83e\udde9 8. Next Steps","text":"<p>Congratulations \u2014 you\u2019ve successfully created and executed your first CybMASDE project! \ud83c\udf89</p> <p>You can now explore:</p> <ul> <li>Usage \u2014 Learn about all CLI commands and options.</li> <li>Architecture \u2014 Understand how CybMASDE components interact.</li> <li>API Reference \u2014 Integrate CybMASDE into your own research workflows.</li> </ul>"},{"location":"glossary/","title":"Glossary of Terms","text":"<p>This glossary provides definitions for key terms used throughout the CybMASDE documentation. </p>"},{"location":"glossary/#terms","title":"Terms","text":""},{"location":"glossary/#api","title":"API","text":"<p>Application Programming Interface; a set of rules and tools for building software applications.</p>"},{"location":"glossary/#dependency","title":"Dependency","text":"<p>A library or package that a project requires to function correctly.</p>"},{"location":"glossary/#github-actions","title":"GitHub Actions","text":"<p>A CI/CD service that allows you to automate your workflow directly in your GitHub repository.</p>"},{"location":"glossary/#mkdocs","title":"MkDocs","text":"<p>A static site generator that's geared towards project documentation.</p>"},{"location":"glossary/#repository","title":"Repository","text":"<p>A storage location for software packages, which can be hosted on platforms like GitHub.</p>"},{"location":"glossary/#virtual-environment","title":"Virtual Environment","text":"<p>An isolated environment in which Python projects can run, allowing for dependency management without affecting the global Python installation.</p>"},{"location":"glossary/#workflow","title":"Workflow","text":"<p>A defined process or series of steps that automate tasks in software development, often used in CI/CD pipelines. </p> <p>Feel free to add more terms as needed to enhance the glossary!</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>CybMASDE can be installed on Linux (and optionally Windows 10 as far as we know) using the provided installation script. The process automatically installs all required backend and frontend dependencies, creates the recommended environment structure, and prepares the platform for CLI or GUI use.</p>"},{"location":"installation/#prerequisites","title":"\ud83e\uddf0 Prerequisites","text":"<p>Before installing CybMASDE, make sure the following tools are available on your system:</p> <ul> <li>Git (for cloning the repository)</li> <li>Python 3.8 </li> <li>pip (Python package manager)</li> <li>node (runtime environment for running JavaScript on the server side)</li> <li>npm (package manager for managing dependencies and third-party libraries for Node. js)</li> </ul> <p>You can check if these are already installed:</p> <pre><code>git --version\npython --version\npip --version\n````\n\n---\n\n## \ud83d\ude80 Quick Installation\n\nClone the CybMASDE repository and run the installation script:\n\n```bash\n# Clone the repository\ngit clone https://github.com/julien6/CybMASDE.git\ncd CybMASDE\n\n# Run the installation script\n./install.sh\n</code></pre> <p>The script will automatically:</p> <ul> <li>Create or activate a virtual environment (<code>env</code> in the <code>backend</code> folder), </li> <li>Install all Python dependencies from <code>requirements.txt</code>, </li> <li>Install the npm packages required for the graphical frontend, </li> <li>Set up the command-line entry point (<code>cybmasde</code>), </li> <li>Verify that the environment variables and paths are configured correctly.</li> </ul>"},{"location":"installation/#optional-manual-installation-advanced-users","title":"\ud83e\udde9 Optional: Manual Installation (Advanced Users)","text":"<p>If you prefer to install manually, you can do something like:</p> <pre><code>git clone https://github.com/julien6/CybMASDE.git\ncd CybMASDE/backend\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre> <p>To enable the CLI globally (optional):</p> <pre><code>pip install -e .\n</code></pre>"},{"location":"installation/#post-installation-check","title":"\ud83e\udde0 Post-Installation Check","text":"<p>Verify that CybMASDE is correctly installed by running:</p> <pre><code>cybmasde --version\n</code></pre> <p>You should see an output similar to:</p> <pre><code>CybMASDE_1.0.0\n</code></pre> <p>You can also check the available commands:</p> <pre><code>cybmasde --help\n</code></pre>"},{"location":"installation/#using-the-graphical-interface-optional","title":"\ud83d\udda5\ufe0f Using the Graphical Interface (Optional)","text":"<p>If you want to launch the Angular-based GUI, navigate to the GUI folder and start it:</p> <pre><code>cd CybMASDE/frontend\nnpm install\nnpm run start\n</code></pre> <p>A native-like Electron window should pop up. Otherwise, you should check logs at opening your browser at: \ud83d\udc49 <code>http://localhost:4200</code></p>"},{"location":"installation/#troubleshooting","title":"\ud83e\uddef Troubleshooting","text":"Issue Possible Fix <code>Permission denied: install.sh</code> Run <code>chmod +x install.sh</code> before executing. <code>ModuleNotFoundError</code> after install Ensure you are using the correct Python environment ( <code>source .venv/bin/activate</code> ). GUI doesn\u2019t launch Make sure Node.js \u2265 18 is installed ( <code>node -v</code> )."},{"location":"installation/#next-steps","title":"\u2705 Next Steps","text":"<p>Once installed, you can proceed to:</p> <ul> <li>Getting Started: Learn how to create and run your first CybMASDE project.</li> <li>Usage: Explore the CLI, configuration files, and GUI options.</li> <li>Architecture: Understand how the MAMAD workflow is implemented.</li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>CybMASDE (Cyber Multi-Agent System Design Environment) is a unified research and development platform for designing, training, analyzing, and deploying intelligent multi-agent systems (MAS). It was originally developed as part of a doctoral research project between Universit\u00e9 Grenoble Alpes (LCIS Laboratory) and Thales LAS - La Ruche (Rennes, France), within the context of cyber-defense and autonomous system coordination.</p> <p>CybMASDE provides both theoretical grounding and practical tooling to bridge the gap between simulation-based AI research and operational, explainable, and deployable multi-agent systems.</p>"},{"location":"introduction/#objectives","title":"\ud83c\udfaf Objectives","text":"<p>The main objective of CybMASDE is to provide a methodological and software framework that supports the entire lifecycle of a multi-agent system (from conceptual modeling to real-world deployment). It integrates multiple AI paradigms under a unified structure called MAMAD:</p> <p>MAMAD (MOISE+MARL Assisted MAS Design)</p> <p>This framework allows: * The modeling of environments, world models, and organizations,  * The training of agent policies using organizationally constrained MARL,  * The analysis of learned behaviors and emergent dynamics (e.g., via explainability tools like TEMM),  * The transfer of these behaviors into real or hybrid infrastructures,  * And the iterative refinement of agent\u2013organization configurations through feedback cycles.</p>"},{"location":"introduction/#theoretical-foundations","title":"\ud83e\udde9 Theoretical Foundations","text":"<p>CybMASDE is built on two key scientific paradigms:</p> <ol> <li> <p>Multi-Agent Reinforcement Learning (MARL)    Provides the adaptive intelligence layer where agents learn optimal behaviors via trial and error in cooperative, competitive, or mixed environments.</p> </li> <li> <p>MOISE+ Organizational Modeling    Defines explicit organizational roles, missions, and constraints that guide agents\u2019 decisions, ensuring structured autonomy and coordinated behavior.</p> </li> </ol> <p>By coupling MOISE+ and MARL, CybMASDE enables a new research direction called MOISE+MARL, where learning is guided by organizational norms and organizational structures evolve based on learned behaviors.</p>"},{"location":"introduction/#why-cybmasde","title":"\ud83e\udde0 Why CybMASDE?","text":"<p>Traditional multi-agent frameworks focus either on: * Engineering tools (simulation engines, orchestration layers), or AI libraries* (learning algorithms, policy optimization).</p> <p>CybMASDE combines both worlds, allowing users to: * Model complex, multi-level environments (agents, organizations, infrastructures),  * Train adaptive agents under explicit organizational constraints,  * Analyze their behaviors through automated and explainable methods,  * Transfer policies to real-world cyber-physical systems (via APIs or embedded agents),  * And Refine the full system iteratively.</p> <p>This makes CybMASDE a comprehensive MAMAD-compliant pipeline from conception to deployment.</p>"},{"location":"introduction/#key-components","title":"\ud83e\uddee Key Components","text":"<p>CybMASDE is composed of five core modules:</p> Module Purpose Example Features Modeling Build or generate environments and world models. Handcrafted environments, latent dynamics models (VAE, RNN, etc.) Training Optimize agent behaviors under MARL and MOISE+ constraints. MAPPO, MADDPG, QMIX, ROMA, organizational reward shaping Analyzing Interpret, visualize, and explain agent behaviors. Auto-TEMM, trajectory clustering, explainability metrics Transferring Deploy learned policies in real or hybrid environments. REST API deployment, trajectory synchronization Refining Iterate based on analysis outcomes. Feedback loops, re-training triggers, organizational adaptation <p>Each component is fully configurable via a project configuration file ( <code>project_configuration.json</code> ), making the pipeline flexible for both research and applied contexts.</p>"},{"location":"introduction/#typical-use-cases","title":"\ud83d\udca1 Typical Use Cases","text":"<p>CybMASDE is designed to support a wide range of application domains:</p> <ul> <li>Cyber-Defense: autonomous intrusion detection and response coordination  </li> <li>Swarm Robotics: decentralized control and collective adaptation  </li> <li>Industrial IoT: resource optimization in distributed networks  </li> <li>Microservice Management: adaptive orchestration under changing workloads  </li> <li>Research &amp; Simulation: experimentation in MARL and multi-agent organization learning</li> </ul>"},{"location":"introduction/#interfaces-and-integration","title":"\u2699\ufe0f Interfaces and Integration","text":"<p>CybMASDE can be used through several interfaces:</p> <ul> <li>CLI (Command Line Interface) \u2013 for automation, HPC batch runs, and reproducible experiments.  </li> <li>Python Library \u2013 for integration into research workflows and Jupyter notebooks.  </li> <li>Web GUI (Angular) \u2013 for visual project creation, configuration, and monitoring.  </li> </ul> <p>All three interfaces rely on a shared backend API and consistent configuration schema, ensuring that projects remain interoperable across use modes.</p>"},{"location":"introduction/#research-impact","title":"\ud83d\udd2c Research Impact","text":"<p>CybMASDE provides a testbed for studying key research questions in distributed AI:</p> <ul> <li>How can organizations guide learning in multi-agent systems?  </li> <li>How can explainability and interpretability be integrated into MARL?  </li> <li>How can policies trained in simulation be safely transferred to real infrastructures?  </li> <li>How can agent coordination be maintained under uncertainty or partial observability?  </li> </ul> <p>The platform has been validated in multiple experimental scenarios: * Company Infrastructure (Cyber-Defense) * Drone Swarm * Microservices on Kubernetes * Warehouse Management * Overcooked-AI Environments * ...</p>"},{"location":"introduction/#learn-more","title":"\ud83e\udded Learn More","text":"<p>If you\u2019re new to CybMASDE, start with:</p> <ul> <li>Installation \u2013 Set up the environment and dependencies.  </li> <li>Getting Started \u2013 Create your first project.  </li> <li>Architecture \u2013 Understand the internal organization of CybMASDE.  </li> <li>Commands \u2013 Explore the full CLI reference.  </li> </ul>"},{"location":"usage/","title":"Usage of CybMASDE","text":"<p>CybMASDE is designed to provide users with a seamless experience in managing and analyzing cyber threats. This document outlines how to effectively use the features of CybMASDE.</p>"},{"location":"usage/#getting-started","title":"Getting Started","text":"<p>To begin using CybMASDE, ensure that you have completed the installation process as described in the Installation Guide. Once installed, you can start utilizing the various functionalities offered by the project.</p>"},{"location":"usage/#basic-commands","title":"Basic Commands","text":"<p>Here are some basic commands to get you started:</p> <ol> <li>Command 1: Description of what this command does.</li> <li>Example: <code>cybmasde command1 --option value</code></li> <li> <p>Expected Output: Description of the expected output.</p> </li> <li> <p>Command 2: Description of what this command does.</p> </li> <li>Example: <code>cybmasde command2 --option value</code></li> <li>Expected Output: Description of the expected output.</li> </ol>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":"<p>For advanced users, CybMASDE offers additional features that can be accessed through specific commands:</p> <ul> <li>Feature 1: Detailed explanation of this feature and how to use it.</li> <li>Feature 2: Detailed explanation of this feature and how to use it.</li> </ul>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#example-1-using-command-1","title":"Example 1: Using Command 1","text":"<pre><code>cybmasde command1 --option value\n</code></pre> <p>This command will perform the following actions...</p>"},{"location":"usage/#example-2-using-command-2","title":"Example 2: Using Command 2","text":"<pre><code>cybmasde command2 --option value\n</code></pre> <p>This command will perform the following actions...</p>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues while using CybMASDE, refer to the FAQ section for common problems and solutions. Additionally, you can check the Changelog for any recent updates that may affect functionality.</p>"},{"location":"usage/#conclusion","title":"Conclusion","text":"<p>CybMASDE is a powerful tool for cyber threat management. By following the instructions in this document, you can effectively utilize its features to enhance your cybersecurity efforts. For further assistance, consider reaching out through the Contributing page.</p>"}]}